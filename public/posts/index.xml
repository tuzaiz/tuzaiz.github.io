<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Posts on Henry Tseng</title>
    <link>http://localhost:1313/posts/</link>
    <description>Recent content in Posts on Henry Tseng</description>
    <generator>Hugo -- 0.145.0</generator>
    <language>zh-tw</language>
    <lastBuildDate>Fri, 21 Mar 2025 21:19:55 +0800</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>如何整合 Sign in with Apple 到自己的 iOS App 上 (iOS &amp; Backend)</title>
      <link>http://localhost:1313/posts/2019-12-10_%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88-sign-in-with-apple-%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84-ios-app-%E4%B8%8A-ios-backend/</link>
      <pubDate>Tue, 10 Dec 2019 12:42:22 +0000</pubDate>
      <guid>http://localhost:1313/posts/2019-12-10_%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88-sign-in-with-apple-%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84-ios-app-%E4%B8%8A-ios-backend/</guid>
      <description>&lt;p&gt;&lt;img alt=&#34;image&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2019-12-10_%E5%A6%82%E4%BD%95%E6%95%B4%E5%90%88-sign-in-with-apple-%E5%88%B0%E8%87%AA%E5%B7%B1%E7%9A%84-ios-app-%E4%B8%8A-ios-backend/images/1.png#layoutTextWidth&#34;&gt;
根據&lt;a href=&#34;https://developer.apple.com/app-store/review/guidelines/#sign-in-with-apple&#34;&gt;蘋果的規定&lt;/a&gt;，明年四月之後只要你的 App 中有包含&lt;strong&gt;任一第三方登入&lt;/strong&gt;就必須支援 Sign in with Apple，要不然就無法通過審核上架。&lt;/p&gt;
&lt;p&gt;因此稍微花了點時間去研究該如何整合 Sign in with Apple 到 iOS App 裡面，同時為了跟 Backend 說明這個流程也就一併理解 Backend 這邊該怎麼處理，在這邊就分成 App 端與 Server 端來分別說明。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;這邊講到的只有要讓 iOS App 支援 Sign in with Apple 部分，如果你的服務是跨平臺，希望讓 Web、Android 也能支援的話，需要在 Apple Developer 上再新建一個 Services ID，然後利用官方提供的 JS Library 或自己串接官方的 API Endpoints&lt;/p&gt;&lt;/blockquote&gt;
&lt;h3 id=&#34;ios-app-端&#34;&gt;iOS App 端&lt;/h3&gt;
&lt;p&gt;App 端串接 Sign in with Apple 相當簡單，大致分成五個步驟&lt;/p&gt;
&lt;h4 id=&#34;apple-developer-後臺啓用-sign-in-with-apple&#34;&gt;Apple Developer 後臺啓用 Sign in with Apple&lt;/h4&gt;
&lt;p&gt;請先前往 &lt;a href=&#34;https://developer.apple.com/account/resources/identifiers/list&#34;&gt;https://developer.apple.com/account/resources/identifiers/list&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;然後點開自己的 App ID 找到 Sign in with Apple 並啓用它&lt;/p&gt;</description>
    </item>
    <item>
      <title>有幫到忙太好了，有心得的話歡迎回來分享一下😁</title>
      <link>http://localhost:1313/posts/2018-10-19_%E6%9C%89%E5%B9%AB%E5%88%B0%E5%BF%99%E5%A4%AA%E5%A5%BD%E4%BA%86%E6%9C%89%E5%BF%83%E5%BE%97%E7%9A%84%E8%A9%B1%E6%AD%A1%E8%BF%8E%E5%9B%9E%E4%BE%86%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B/</link>
      <pubDate>Fri, 19 Oct 2018 16:41:04 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018-10-19_%E6%9C%89%E5%B9%AB%E5%88%B0%E5%BF%99%E5%A4%AA%E5%A5%BD%E4%BA%86%E6%9C%89%E5%BF%83%E5%BE%97%E7%9A%84%E8%A9%B1%E6%AD%A1%E8%BF%8E%E5%9B%9E%E4%BE%86%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%8B/</guid>
      <description>&lt;p&gt;有幫到忙太好了，有心得的話歡迎回來分享一下😁&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用 Swift Playground 撰寫精美又可互動的技術文件</title>
      <link>http://localhost:1313/posts/2018-10-19_%E5%88%A9%E7%94%A8-swift-playground-%E6%92%B0%E5%AF%AB%E7%B2%BE%E7%BE%8E%E5%8F%88%E5%8F%AF%E4%BA%92%E5%8B%95%E7%9A%84%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/</link>
      <pubDate>Fri, 19 Oct 2018 15:35:55 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018-10-19_%E5%88%A9%E7%94%A8-swift-playground-%E6%92%B0%E5%AF%AB%E7%B2%BE%E7%BE%8E%E5%8F%88%E5%8F%AF%E4%BA%92%E5%8B%95%E7%9A%84%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/</guid>
      <description>&lt;p&gt;今天利用時間把一直沒時間只好放在待學期清單裡的 Playground 好好的摸了一遍，剛好可以致敬明天要舉辦的 &lt;a href=&#34;http://iplayground.io/&#34;&gt;iPlayground&lt;/a&gt; （硬要扯）&lt;/p&gt;
&lt;p&gt;當 Swift 公開時，同時也開放了一個很強大的工具，那就是 Swift Playground 。利用 Playground 可以即時的看到自己寫的一些程式執行的結果是否正確，而不用不斷的重新 Build &amp;amp; Run 。而隨著 Swift 版本已經來到了 4.2 的今日，Playground 的功能也越來越強大，不但可以即時顯示結果，甚至可以直接在上面做 UI 、寫文件。&lt;/p&gt;
&lt;h3 id=&#34;主要目標&#34;&gt;主要目標&lt;/h3&gt;
&lt;p&gt;今天一開始先設定好我想要理解的幾個目標：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立 Playground&lt;/li&gt;
&lt;li&gt;在 Playground 中設計 UI&lt;/li&gt;
&lt;li&gt;整合第三方 Framework&lt;/li&gt;
&lt;li&gt;在實際維護的專案中加入 Playground&lt;/li&gt;
&lt;li&gt;利用 Playground 撰寫文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;建立-playground&#34;&gt;建立 Playground&lt;/h3&gt;
&lt;p&gt;首先是建立 Playground ，跟一般的檔案一樣，從 Xcode 裡面選擇 File -&amp;gt; New -&amp;gt; Playground 就可以建立一個基本的 Playground&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2018-10-19_%E5%88%A9%E7%94%A8-swift-playground-%E6%92%B0%E5%AF%AB%E7%B2%BE%E7%BE%8E%E5%8F%88%E5%8F%AF%E4%BA%92%E5%8B%95%E7%9A%84%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/images/1.png#layoutTextWidth&#34;&gt;&lt;/p&gt;
&lt;p&gt;此時可以選擇樣板，基本上就是看你要拿來試做什麼，預先幫你準備好基本需要用到的原始碼。&lt;/p&gt;
&lt;p&gt;選擇了 &lt;code&gt;Blank&lt;/code&gt; 就會建立一個最基本的 Playground&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2018-10-19_%E5%88%A9%E7%94%A8-swift-playground-%E6%92%B0%E5%AF%AB%E7%B2%BE%E7%BE%8E%E5%8F%88%E5%8F%AF%E4%BA%92%E5%8B%95%E7%9A%84%E6%8A%80%E8%A1%93%E6%96%87%E4%BB%B6/images/2.png#layoutTextWidth&#34;&gt;&lt;/p&gt;
&lt;p&gt;此時按左邊行數列上面的執行按鈕就可以讓 Playground 執行到那一行，也可以選擇 &lt;code&gt;Editor -&amp;amp;gt; Run Playground&lt;/code&gt; 或按 ⌘⇧↩︎ 執行全部，運算出的值會顯示在右邊側邊列。&lt;/p&gt;
&lt;h3 id=&#34;在-playground-中設計-ui&#34;&gt;在 Playground 中設計 UI&lt;/h3&gt;
&lt;p&gt;在建立 Playground 選擇樣板時選擇 View 的話就會建立一個有個基本 UIView 的 Playground ，也可以在既有的 Playground 中先
&lt;code&gt;import PlaygroundSupport   import UIKit&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>利用Generic Type跟Extension來優化Storyboard取得UIViewController的動作</title>
      <link>http://localhost:1313/posts/2018-01-22_%E5%88%A9%E7%94%A8generic-type%E8%B7%9Fextension%E4%BE%86%E5%84%AA%E5%8C%96storyboard%E5%8F%96%E5%BE%97uiviewcontroller%E7%9A%84%E5%8B%95%E4%BD%9C/</link>
      <pubDate>Mon, 22 Jan 2018 16:00:31 +0000</pubDate>
      <guid>http://localhost:1313/posts/2018-01-22_%E5%88%A9%E7%94%A8generic-type%E8%B7%9Fextension%E4%BE%86%E5%84%AA%E5%8C%96storyboard%E5%8F%96%E5%BE%97uiviewcontroller%E7%9A%84%E5%8B%95%E4%BD%9C/</guid>
      <description>&lt;p&gt;每次在處理從Storyboard中取出ViewController的動作時，大多都會用到類似下面這樣的程式碼：
&lt;code&gt;let viewController = storyboard.instantiateViewController(withIdentifier: &amp;amp;#34;SomeViewController&amp;amp;#34;) as! SomeViewController&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而今天我在做第N次這樣的動作時心想，不知道有沒有辦法讓這一段變得更加的直覺。&lt;/p&gt;
&lt;p&gt;簡單地分析了一下，主要我想解決的問題是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;使用字串作爲Identifier容易因爲錯字而導致錯誤&lt;/li&gt;
&lt;li&gt;必須要強制轉型成正確的Type&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在確定了想改善的方向之後我就開始規劃。首先我先建立一個Struct去存放原本需要的Identifier字串，然後利用Generic Type來將我們想要轉換的Type給存放起來，所以就產生像下面這樣的Struct：
`struct StoryboardIdentifier&amp;lt;T: UIViewController&amp;gt; {&lt;br&gt;
var identifier: String&lt;br&gt;
var type: T.Type&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;init(identifier: String, type: T.Type) {  
    self.identifier = identifier  
    self.type = type  
}  
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;}`&lt;/p&gt;
&lt;p&gt;建立好架構後，就用Extension將前面舉例的SomeViewController的Type跟Identifier定義爲一個static variable：
&lt;code&gt;extension StoryboardIdentifier {   static var some: StoryboardIdentifier&amp;amp;lt;SomeViewController&amp;amp;gt; {   return StoryboardIdentifier&amp;amp;lt;SomeViewController&amp;amp;gt;(identifier: &amp;amp;#34;SomeViewController&amp;amp;#34;, type: SomeViewController.self)   }   }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這樣，就可以直接用 StorybosardIdentifier.some 這樣的方式去取得那個我們定義好的Identifier。&lt;/p&gt;
&lt;p&gt;但因爲原本的UIStoryboard並不認識StoryboardIdentifier這個Struct，所以我利用Extension去給它增加一個Method，將帶入的StoryboardIdentifier給轉換成對應的UIViewController：
&lt;code&gt;extension UIStoryboard {   func instantiateViewController&amp;amp;lt;T&amp;amp;gt;(withIdentifier identifier: StoryboardIdentifier&amp;amp;lt;T&amp;amp;gt;) -&amp;amp;gt; T {   return self.instantiateViewController(withIdentifier: identifier.identifier) as! T   }   }&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>使用類似Notification.Name的方法處理UserDefaults與其他當作Key的字串</title>
      <link>http://localhost:1313/posts/2017-09-20_%E4%BD%BF%E7%94%A8%E9%A1%9E%E4%BC%BCnotification.name%E7%9A%84%E6%96%B9%E6%B3%95%E8%99%95%E7%90%86userdefaults%E8%88%87%E5%85%B6%E4%BB%96%E7%95%B6%E4%BD%9Ckey%E7%9A%84%E5%AD%97%E4%B8%B2/</link>
      <pubDate>Wed, 20 Sep 2017 10:08:55 +0000</pubDate>
      <guid>http://localhost:1313/posts/2017-09-20_%E4%BD%BF%E7%94%A8%E9%A1%9E%E4%BC%BCnotification.name%E7%9A%84%E6%96%B9%E6%B3%95%E8%99%95%E7%90%86userdefaults%E8%88%87%E5%85%B6%E4%BB%96%E7%95%B6%E4%BD%9Ckey%E7%9A%84%E5%AD%97%E4%B8%B2/</guid>
      <description>&lt;p&gt;在Swift 3之前，我們需要使用字串去作為發送或監聽NotificationCenter的事件名稱，而從Swift 3之後，我們可以使用Notification.Name來作為NotificationCenter的名稱。&lt;/p&gt;
&lt;p&gt;使用這方法我們就可以事先定義好，不用擔心在不同的地方打錯字串而造成事件無法收到的問題，只需要先像這樣宣告好Name：
&lt;code&gt;extension NSNotification.Name {   static var userLogin = NSNotification.Name(rawValue: &amp;amp;#34;UserLogin&amp;amp;#34;)   }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;之後就可以用這個Name去處理NotificationCenter的事件
&lt;code&gt;// 發送   NotificationCenter.default.post(name: .userLogin, object: user)``// 監聽   NotificationCenter.default.addObserver(forName: .userLogin, object: nil, queue: nil) {(notification) in   // Handle   }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這方法的好處是，在name的位置我們只需要打 &lt;code&gt;.&lt;/code&gt; Xcode就會跳出所有定義好的Name，從而避免字串打錯字而發生行為錯誤的問題。&lt;/p&gt;
&lt;p&gt;那這引起我的另一個想法，我們是否可以用類似的方法去處理UserDefaults或Keychain等等的Keys呢？&lt;/p&gt;
&lt;p&gt;嘗試之後，發現可以用一個extension就做到類似的行為，以下以UserDefaults為例&lt;/p&gt;
&lt;p&gt;首先貼上以下這段
&lt;code&gt;extension UserDefaults {   enum Key {   case &lt;/code&gt;default&lt;code&gt;(key: String)   init(key: String) {   self = .default(key: key)   }   }   }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;這裡我們使用extension去建立一個enum在UserDefaults下面，並放一個default的case去儲存字串&lt;/p&gt;
&lt;p&gt;然後用extension給UserDefaults新增一些使用UserDefaults.Key而非String的方法：
`extension UserDefaults {&lt;br&gt;
func set(_ value: Any?, forKey key: UserDefaults.Key) {&lt;br&gt;
if case UserDefaults.Key.default(let k) = key {&lt;br&gt;
self.set(value, forKey: k)&lt;br&gt;
}&lt;br&gt;
}&lt;/p&gt;</description>
    </item>
    <item>
      <title>用Alamofire做HTTP Basic Authentication</title>
      <link>http://localhost:1313/posts/2015-03-08_%E7%94%A8alamofire%E5%81%9Ahttp-basic-authentication/</link>
      <pubDate>Sun, 08 Mar 2015 09:31:10 +0000</pubDate>
      <guid>http://localhost:1313/posts/2015-03-08_%E7%94%A8alamofire%E5%81%9Ahttp-basic-authentication/</guid>
      <description>&lt;p&gt;這週末有個機會要做個小Sample給別人，這個Sample Project需要用到HTTP API Request且這個Request需要做HTTP Basic Authentication。&lt;/p&gt;
&lt;p&gt;想說有這個機會，也不是正式產品，因此就試著完全用Swift來寫，那HTTP Request當然就交給&lt;strong&gt;AFNetworking&lt;/strong&gt;的作者 &lt;strong&gt;Mattt Thompson&lt;/strong&gt; 所製作的另一個套件 &lt;a href=&#34;https://github.com/Alamofire/Alamofire&#34;&gt;&lt;strong&gt;Alamofire&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Alamofire是完全基於Swift所撰寫的HTTP Request套件，整個語法都有著濃濃的Functional Programming特性在其中。&lt;/p&gt;
&lt;p&gt;以下範例是直接將Alamofire.swift Copy到Bundle中的作法，如果是用CocoaPods或其他方法安裝的話，請先 &lt;em&gt;import Alamofire&lt;/em&gt; ，然後在每個Method call前加上 &lt;em&gt;Alamofire&lt;/em&gt;。如 &lt;em&gt;request() 要改成 Alamofire.request()&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;要發送一個GET方法的要求出去只要這樣：
&lt;code&gt;request(.GET, “http://this.is.url/path”)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;而要處理回傳的內容則只要接著：
&lt;code&gt;request(.GET, “http://this.is.url/path”).response {(req, res, data, error) in   // Handle in here``}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;相當簡單易懂，但對寫Objective-C久了的人來說一定很不習慣。&lt;/p&gt;
&lt;p&gt;不過這次的要求不單只是要送一個Request出去而已，還需要做HTTP Basic Authentication，查了一下官方Repo上的說明，要做Authentication只需要：
&lt;code&gt;request(.GET, “http://this.is.url/path”).authenticate(user: &amp;amp;#34;username&amp;amp;#34;, password: &amp;amp;#34;password&amp;amp;#34;).response {(req, res, data, error) in   // Handle in here``}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;即可，我很興奮地照著實作，然後就一直接到&lt;strong&gt;401 Unauthorized&lt;/strong&gt;的錯誤…&lt;/p&gt;
&lt;p&gt;把發送出去的Request攔下來看，結果發現雖然有帶Authentication，但是Header中卻沒有Authentication的欄位。HTTP Basic Authentication除了要求User跟Password之外，還要求要帶一個值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;“Authorization” = “Basic MTIzNDo1Njc4&amp;quot;&lt;/em&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;後面那串亂碼是由字串 “Username:Password” 經由Base64轉換出來的字串，但是Alamofire並沒有實作這個，因此要正常運作，我們必須自行給它加上這個Header。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swift 的 String 操作</title>
      <link>http://localhost:1313/posts/2015-02-12_swift-%E7%9A%84-string-%E6%93%8D%E4%BD%9C/</link>
      <pubDate>Thu, 12 Feb 2015 10:23:08 +0000</pubDate>
      <guid>http://localhost:1313/posts/2015-02-12_swift-%E7%9A%84-string-%E6%93%8D%E4%BD%9C/</guid>
      <description>&lt;p&gt;在Swift中有自己獨立的字串格式 &lt;strong&gt;String&lt;/strong&gt;，操作的方法與NSString類似，將各種的操作方式整理在這邊方便大家查找。&lt;/p&gt;
&lt;p&gt;大概是為了跟Objective-C能夠相容，部分String methods依舊是跟NSString相同，但又多了些新的用法，所以整個用法很不統一，因此在寫這篇文章的同時，順手寫了一個Extension將這些方法整理在一起，可以用比較統一的方法去做字串操作。&lt;/p&gt;
&lt;p&gt;如果有人有興趣，可以參考： &lt;a href=&#34;https://github.com/tuzaiz/RacoonString&#34;&gt;https://github.com/tuzaiz/RacoonString&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;取得字串長度&#34;&gt;取得字串長度&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;countElements(string) // Swift 1.0``count(string) // Swift 1.2&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;racoonstring&#34;&gt;RacoonString&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;string.length() // RacoonString&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;尋找字串&#34;&gt;尋找字串&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;var string = “Swift is awesome”``let range = string.rangeOfString(“awesome”)``if let range = range {``    // 尋找字串開始位置``    println(“Start with: \(range.startIndex)”)``    println(“End with: \(range.endIndex)”)``    // 取出要查詢的字串``    println(string[range])``}&lt;/code&gt;&lt;/p&gt;
&lt;h4 id=&#34;racoonstring-1&#34;&gt;RacoonString&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;string.match(&amp;amp;#34;awesome&amp;amp;#34;)   if let regex = &amp;amp;#34;awe(some)&amp;amp;#34; {   string.match(regex)``}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;抓出特定範圍的字串&#34;&gt;抓出特定範圍的字串&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;let r = 3..&amp;amp;lt;5``let startIndex = advance(string.startIndex, r.startIndex)``let endIndex = advance(startIndex, r.endIndex — r.startIndex)``string[Range(start: startIndex, end: endIndex)]&lt;/code&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swift下將NSData轉換成String</title>
      <link>http://localhost:1313/posts/2014-10-19_swift%E4%B8%8B%E5%B0%87nsdata%E8%BD%89%E6%8F%9B%E6%88%90string/</link>
      <pubDate>Sun, 19 Oct 2014 14:58:58 +0000</pubDate>
      <guid>http://localhost:1313/posts/2014-10-19_swift%E4%B8%8B%E5%B0%87nsdata%E8%BD%89%E6%8F%9B%E6%88%90string/</guid>
      <description>&lt;p&gt;Swift中跟Foundation之間的恩怨情仇實在剪不斷理還亂。&lt;/p&gt;
&lt;p&gt;在Foundation中大部份I/O時都會取得NSData格式的資料，而以前在Objective-C時取得NSData要轉成NSString需要經過
&lt;code&gt;NSString *string = [[NSString alloc] initWithData:data encoding:NSUTF8Encoding];&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;將NSData轉換成NSString，但是在Swift下對於字串有自己專用的Type &lt;strong&gt;String&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我原本以為應該會有 &lt;strong&gt;String.stringWithData(data, encoding=.UTF8)&lt;/strong&gt; 或是 &lt;strong&gt;String(data, encoding=.UTF8)&lt;/strong&gt; 之類的方法可以用，結果找了半天都找不到。&lt;/p&gt;
&lt;p&gt;查了半天，結果終於找到解法：
&lt;code&gt;var string : String = NSString(data: data, encoding: NSUTF8StringEncoding)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;原來因為在Swift下的String基本上背後還是NSString，所以可以直接轉換來使用。&lt;/p&gt;
&lt;p&gt;Swift是個好語言，不過為了與既有的Foundation架構還有Objective-C相容實在要花太多的力氣，這是目前學習Swift的一個很大的障礙，接下來就看蘋果會怎麼去發展這個潛力無窮的新語言囉。&lt;/p&gt;</description>
    </item>
    <item>
      <title>用Swift寫Core Data會遇到的Type錯誤</title>
      <link>http://localhost:1313/posts/2014-10-18_%E7%94%A8swift%E5%AF%ABcore-data%E6%9C%83%E9%81%87%E5%88%B0%E7%9A%84type%E9%8C%AF%E8%AA%A4/</link>
      <pubDate>Sat, 18 Oct 2014 14:56:19 +0000</pubDate>
      <guid>http://localhost:1313/posts/2014-10-18_%E7%94%A8swift%E5%AF%ABcore-data%E6%9C%83%E9%81%87%E5%88%B0%E7%9A%84type%E9%8C%AF%E8%AA%A4/</guid>
      <description>&lt;p&gt;這幾天用Swift撰寫Core Data的應用時總是會出現一些詭異的錯誤，像是下面這段Code：
&lt;code&gt;var fetchRequest = NSFetchRequest(entityName: “Person”)   var people = appDelegate.managedObjectContext?.executeFetchRequest(fetchRequest, error: nil)   var person = people?.first as Person   println(people)   println(person)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同樣類似的用法，我曾遇過下面兩種奇特的狀況&lt;/p&gt;
&lt;p&gt;一種是第一個println有輸出Array與值，但person卻是nil。&lt;/p&gt;
&lt;p&gt;而另一種則是直接就顯示下面的Warning接著Crash&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;CoreData: warning: Unable to load class named ‘Person’ for entity ‘Person’. Class not found, using default NSManagedObject instead.&lt;/strong&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;查了許多地方後終於找出了問題的所在，原來在Swift中關於Type的形式應該是 &lt;strong&gt;ProjectName.TypeName&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但Xcode在 .xcdatamodeld 新增Entity時，並不會將Entity指向正確的Type，格式只有 **TypeName，**導致Runtime時找不到該Type，所以不然是因為 as 的轉型態不正確而變成 nil，要不然就是直接Crash。&lt;/p&gt;
&lt;p&gt;我想這是諸多Swift為了相容於舊專案而衍生出來的問題之一，不過解法也相當簡單，只要到 .xcdatamodeld 檔案中的Configurations將每一個Entity的Class指向正確的地方就可以了。&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2014-10-18_%E7%94%A8swift%E5%AF%ABcore-data%E6%9C%83%E9%81%87%E5%88%B0%E7%9A%84type%E9%8C%AF%E8%AA%A4/images/1.png#layoutTextWidth&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&#34;image&#34; loading=&#34;lazy&#34; src=&#34;http://localhost:1313/posts/2014-10-18_%E7%94%A8swift%E5%AF%ABcore-data%E6%9C%83%E9%81%87%E5%88%B0%E7%9A%84type%E9%8C%AF%E8%AA%A4/images/2.png#layoutTextWidth&#34;&gt;&lt;/p&gt;
&lt;p&gt;現在總算是可以正確的抓出我要的資料了。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
